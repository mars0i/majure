(ns students.StudentsWithUI
  (:import [sim.portrayal.continuous ContinuousPortrayal2D]
           [sim.portrayal.network NetworkPortrayal2D SpatialNetwork2D SimpleEdgePortrayal2D]
           [java.awt Color])
  (:gen-class
    :name students.StudentsWithUI
    :extends sim.display.GUIState
    :main true
    :exposes {state {:get getState}}  ; make accessors for fields in superclass
    :exposes-methods {start superStart} ; alias method start() in superclass. (Don't name it 'super-start'. Use a Java name.)
    :state instance-state      ; superclass already has state
    :init init-instance-state  ; we define a MASON init below

    ;; uh, how do I define this??:
    :constructors {[] [sim.engine.SimState]} ; also a state -> state version autogenerated

    ))

(defn -init-instance-state
  [& args]
  [(vec args) {:display (atom nil)
               :display-frame (atom nil)
               :yard-portrayal (ContinuousPortrayal2D.)
               :buddies-portrayal (NetworkPortrayal2D.)}])

(defn -getDisplay [this] @(:display (.state this)))
(defn -setDisplay [this newval] (reset! (:display (.state this)) newval))
(defn -getDisplayFrame [this] @(:display-frame (.state this)))
(defn -setDisplayFrame [this newval] (reset! (:display-frame (.state this)) newval))
(defn -getYardPortrayal [this] (:yard-portrayal (.state this)))
(defn -getBuddiesPortrayal [this] (:buddies-portrayal (.state this)))

(defn -getName [this] "Student Schoolyard Cliques")

(defn -start
  [this]
  (.superStart this)
  (.setupPortrayals this))

(defn -setupPortrayals
  [this]
  (let [students (.getState this)
        yard-portrayal (.getYardPortrayal this)
        buddies-portrayal (.getBuddiesPortrayal this)
        display (.getDisplay this)]

    (.setField yard-portrayal (.getYard students))

    ;; TODO
    ;; (.setPortrayalForAll yard-portrayal ...)

    (.setField buddies-portrayal (SpatialNetwork2D. (.getYard students) (.getBuddies students)))
    (.setPortrayalForAll buddies-portrayal (SimpleEdgePortrayal2D.))

    (.reset display)
    (.setBackdrop display Color/white)
    (.repaint display)

    ))

;; TODO
(defn -init [this] )
(defn -quit [this] )

